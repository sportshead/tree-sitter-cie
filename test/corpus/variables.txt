=================
Simple Variables
=================

// This is a comment
DECLARE Greeting : STRING
DECLARE Star : CHAR
DECLARE Counter : INTEGER
DECLARE TotalToPay : REAL
DECLARE GameOver : BOOLEAN

Greeting <- "hello"
Greeting ← "fancy hello"
Star <- '*'
Counter <- 42
TotalToPay ← -3.14
GameOver <- TRUE

---

(source_file
  (comment)
  (variable_declaration
    name: (identifier)
    type: (basic_type)
  )
  (variable_declaration
    name: (identifier)
    type: (basic_type)
  )
  (variable_declaration
    name: (identifier)
    type: (basic_type)
  )
  (variable_declaration
    name: (identifier)
    type: (basic_type)
  )
  (variable_declaration
    name: (identifier)
    type: (basic_type)
  )
  (assignment
    left: (identifier)
    right: (string_literal)
  )
  (assignment
    left: (identifier)
    right: (string_literal)
  )
  (assignment
    left: (identifier)
    right: (char_literal)
  )
  (assignment
    left: (identifier)
    right: (int_literal)
  )
  (assignment
    left: (identifier)
    right: (real_literal)
  )
  (assignment
    left: (identifier)
    right: (boolean_literal)
  )
)

==========
Constants
==========

CONSTANT Greeting ← "hello"
CONSTANT Star <- '*'
CONSTANT Counter ← 42
CONSTANT TotalToPay <- -3.14
CONSTANT GameOver ← TRUE

---
(source_file
  (constant_declaration
    name: (identifier)
    value: (string_literal)
  )
  (constant_declaration
    name: (identifier)
    value: (char_literal)
  )
  (constant_declaration
    name: (identifier)
    value: (int_literal)
  )
  (constant_declaration
    name: (identifier)
    value: (real_literal)
  )
  (constant_declaration
    name: (identifier)
    value: (boolean_literal)
  )
)

===============================
Arrays (declaration, indexing)
===============================

DECLARE StudentNames : ARRAY[1:30] OF STRING
DECLARE NoughtsAndCrosses : ARRAY[1:3, 1:3] OF CHAR

StudentNames[1] ← "Ali"
NoughtsAndCrosses[2,3] ← 'X'
NoughtsAndCrosses[I,3-J] <- 'O'

// CIE spec gives the following as an example - however `n` is an invalid identifier per spec
// StudentNames[n+1] ← StudentNames[n]
StudentNames[N+1] ← StudentNames[N]

---
(source_file
  (variable_declaration
    name: (identifier)
    type: (array_type
        size: (array_size
            (int_literal)
            (int_literal)
        )
        type: (basic_type)
    )
  )
  (variable_declaration
    name: (identifier)
    type: (array_type
        size: (array_size
            (int_literal)
            (int_literal)
            (int_literal)
            (int_literal)
        )
        type: (basic_type)
    )
  )
  (assignment
    left: (array_index
      array: (identifier)
      index1: (int_literal)
    )
    right: (string_literal)
  )
  (assignment
    left: (array_index
      array: (identifier)
      index1: (int_literal)
      index2: (int_literal)
    )
    right: (char_literal)
  )
  (assignment
    left: (array_index
      array: (identifier)
      index1: (identifier)
      index2: (binary_op
        left: (int_literal)
        right: (identifier)
      )
    )
    right: (char_literal)
  )
  (comment)
  (comment)
  (assignment
    left: (array_index
      array: (identifier)
      index1: (binary_op
        left: (identifier)
        right: (int_literal)
      )
    )
    right: (array_index
      array: (identifier)
      index1: (identifier)
    )
  )
)

============
Expressions
============

Bool <- 1 > 2
Bool <- Bool AND TRUE
Bool <- Bool OR 2 > 3 AND FALSE

---
(source_file
  (assignment
    left: (identifier)
    right: (binary_op
      left: (int_literal)
      right: (int_literal)
    )
  )
  (assignment
    left: (identifier)
    right: (binary_op
      left: (identifier)
      right: (boolean_literal)
    )
  )
  (assignment
    left: (identifier)
    right: (binary_op
      left: (binary_op
        left: (identifier)
        right: (binary_op
          left: (int_literal)
          right: (int_literal)
        )
      )
      right: (boolean_literal)
    )
  )
)

====================
Complex Expressions
====================

B <- (1 > 2) AND (2 > 3)
B <- NOT -1 < 5 AND (3.0 > 4.0 OR 5.0 < 6.0) <> FALSE

---
(source_file
  (assignment
    left: (identifier)
    right: (binary_op
      left: (parenthesized_expression
        expression: (binary_op
          left: (int_literal)
          right: (int_literal)
        )
      )
      right: (parenthesized_expression
        expression: (binary_op
          left: (int_literal)
          right: (int_literal)
        )
      )
    )
  )
  (assignment
    left: (identifier)
    right: (binary_op
      left: (binary_op
        left: (unary_op
          operand: (int_literal)
        )
        right: (int_literal)
      )
      right: (binary_op
        left: (parenthesized_expression
          expression: (binary_op
            left: (binary_op
              left: (real_literal)
              right: (real_literal)
            )
            right: (binary_op
              left: (real_literal)
              right: (real_literal)
            )
          )
        )
        right: (boolean_literal)
      )
    )
  )
)
